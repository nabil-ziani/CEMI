@page "/student"
@page "/student/{id:int}"
@inject IStudentService studentService
@inject NavigationManager navigationManager

@if(Id == null)
{
    <PageTitle>Inschrijven</PageTitle>

    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mb-3">
        <MudText Typo="Typo.h5">Nieuwe student inschrijven</MudText>
    </MudContainer>
}
else
{
    <PageTitle>Bewerken</PageTitle>

    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex justify-space-between mb-3">
        <MudItem Class="d-flex justify-start align-center">
            <MudText Typo="Typo.h5">@student.FirstName @student.LastName</MudText>

            @if (!student.Enrolled)
            {
                <MudChip Class="ml-2" Size="Size.Small" Color="Color.Error">Niet ingeschreven</MudChip>
            }
            else
            {
                <MudChip Class="ml-2" Size="Size.Small" Color="Color.Success">Ingeschreven</MudChip>
            }
        </MudItem>

        <MudItem>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-3 mx-3" OnClick="@(() => {
                navigationManager.NavigateTo($"/student/?siblingid={Id}");
            })">Broer/zus inschrijven</MudButton>
        </MudItem>
    </MudContainer>
}

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudCard>
        <MudForm Model="@student" @ref="@form" Validation="@(studentValidator.ValidateValue)" ValidationDelay="0">
            <MudCardContent>
                @if (student.OldStudent)
                {
                    <MudGrid>
                        <MudItem>
                            <MudAlert Severity="MudBlazor.Severity.Info" Variant="Variant.Filled">Gelieve aan te geven of @student.FirstName geslaagd is:</MudAlert>
                        </MudItem>
                        <MudItem Class="d-flex align-center">
                            <MudSwitch Checked="student.Graduated"
                                       CheckedChanged="(bool result) => OngraduationResult(student, result)"
                                       ThumbIcon="@(student.Graduated == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)"
                                       ThumbIconColor="@(student.Graduated == true ? Color.Success : Color.Error)">
                                Geslaagd
                            </MudSwitch>
                        </MudItem>
                    </MudGrid>
                }

                <!-- voornaam, achternaam, geboortedatum -->
                <MudGrid Class="d-flex justify-space-between my-3">
                    <MudItem xs="4">
                        <MudTextField Required="true" @bind-Value="student.FirstName" For="@(() => student.FirstName)" Label="Voornaam" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Required="true" @bind-Value="student.LastName" For="@(() => student.LastName)" Label="Familienaam" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudDatePicker Required="true" Editable="true" Mask="@(new DateMask("dd-MM-yyyy"))" HelperText="DD-MM-YYYY" HelperTextOnFocus="true" @bind-Date="student.BirthDate" For="(() => student.BirthDate)" DisableToolbar="true" Label="Geboortedatum" />
                    </MudItem>
                </MudGrid>

                <!-- niveau, telefoon1, telefoon2 -->
                <MudGrid Class="d-flex justify-space-between my-3">
                    <MudItem xs="3">
                        <MudSelect Required="true" @bind-Value="student.Level" T="ClassLevel" Label="Klas 2022-2023" AnchorOrigin="Origin.BottomCenter">
                            @foreach (ClassLevel level in Enum.GetValues(typeof(ClassLevel)))
                            {
                                <MudSelectItem T="ClassLevel" Value="@level">@level.GetDisplayName()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Required="true" @bind-Value="student.Phone_1" For="@(() => student.Phone_1)" Label="Telefoon 1" Mask="@(new PatternMask("00 00 00 00 00"))" HelperText="XX XX XX XX XX" HelperTextOnFocus="true" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="student.Phone_2" For="@(() => student.Phone_2)" Label="Telefoon 2" Mask="@(new PatternMask("00 00 00 00 00"))" HelperText="XX XX XX XX XX" HelperTextOnFocus="true" />
                    </MudItem>
                </MudGrid>

                <!-- email1, email2, homeAlone? -->
                <MudGrid Class="d-flex justify-space-between my-3">
                    <MudItem xs="4">
                        <MudTextField Required="true" @bind-Value="student.Email1" For="(() => student.Email1)" Label="E-mailadres 1"></MudTextField>
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="student.Email2" For="(() => student.Email2)" Label="E-mailadres 2"></MudTextField>
                    </MudItem>
                    <MudItem xs="2">
                        <MudCheckBox @bind-Checked="@student.HomeAlone" Color="Color.Primary" For="(() => student.HomeAlone)" Label="Alleen naar huis?"></MudCheckBox>
                    </MudItem>
                </MudGrid>

                <!-- adres -->
                <MudGrid Class="d-flex justify-space-between my-3">
                    <MudItem xs="4">
                        <MudTextField Required="true" @bind-Value="student.Street" For="(() => student.Street)" Label="Straat"></MudTextField>
                    </MudItem>
                    <MudItem xs="1">
                        <MudTextField Required="true" @bind-Value="student.HouseNumber" For="(() => student.HouseNumber)" Label="Huisnummer"></MudTextField>
                    </MudItem>
                    <MudItem xs="1">
                        <MudTextField Required="true" @bind-Value="student.PostalCode" For="(() => student.PostalCode)" Label="Postcode"></MudTextField>
                    </MudItem>
                    <MudItem xs="3">
                        <MudTextField Required="true" @bind-Value="student.District" For="(() => student.District)" Label="Gemeente"></MudTextField>
                    </MudItem>
                </MudGrid>

                <!-- Opmerkingen -->
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="student.Remarks" Label="Opmerkingen" For="(() => student.Remarks)" Lines="3" />
                </MudItem>
            </MudCardContent>

        </MudForm>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-3 mx-3" OnClick="@(async () => await Submit())">@btnText</MudButton>
            @*@if (Id != null)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Error" Class="my-3" OnClick="@(async () => await DeleteStudent())">Verwijder</MudButton>
            }*@
        </MudCardActions>
    </MudCard>
</MudContainer>


@code {
    [Inject] private IDialogService DialogService { get; set; }
    MudForm form;


    [Parameter]
    public int? Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "siblingid")]
    public int? SiblingId { get; set; }

    string btnText = string.Empty;

    StudentModel student = new StudentModel();

    void OngraduationResult(StudentModel student, bool passed)
    {
        student.Graduated = passed;

        if (passed)
        {
            student.Level = student.Level.Next();
        } 
        else
        {
            student.Level = student.Level.Previous();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            student.Level = ClassLevel.Tamhidi;
            if (SiblingId != null)
            {
                var sibling = await studentService.GetSingleStudent((int)SiblingId);
                student = new StudentModel
                {
                    LastName = sibling.LastName,
                    Email1 = sibling.Email1,
                    Email2 = sibling.Email2,
                    Phone_1 = sibling.Phone_1,
                    Phone_2 = sibling.Phone_2,
                    Street = sibling.Street,
                    HouseNumber = sibling.HouseNumber,
                    PostalCode = sibling.PostalCode,
                    District = sibling.District
                };
            }
            btnText = "Inschrijven";
        }
        else
        {
            student = await studentService.GetSingleStudent((int)Id);
            btnText = student.Enrolled ? "Bewerken" : "Herinschrijven";
        }
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            if (Id == null)
            {
                await studentService.CreateStudent(student);
            }
            else
            {
                await studentService.UpdateStudent(student);
            }
        }
    }

    //async Task DeleteStudent()
    //{
    //    bool? result = await DialogService.ShowMessageBox("Opgelet!", "Verwijderen kan niet ongedaan gemaakt worden!", yesText: "Verwijder", cancelText: "Annuleer");
    //    StateHasChanged();

    //    await studentService.DeleteStudent(student.Id);
    //}

    // Validation
    StudentModelFluentValidator studentValidator = new StudentModelFluentValidator();

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="StudentModel"></typeparam>
    public class StudentModelFluentValidator : AbstractValidator<StudentModel>
    {
        public StudentModelFluentValidator()
        {
            RuleFor(x => x.FirstName)
                .NotEmpty().WithMessage("Dit veld is verplicht.");

            RuleFor(x => x.LastName)
                .NotEmpty().WithMessage("Dit veld is verplicht.");

            RuleFor(x => x.BirthDate)
                .NotEmpty().WithMessage("Dit veld is verplicht.");

            RuleFor(x => x.Phone_1)
                .NotEmpty().WithMessage("Dit veld is verplicht.");

            RuleFor(x => x.Email1)
                .NotEmpty().WithMessage("Dit veld is verplicht")
                .EmailAddress().WithMessage("Dit is geen geldig e-mailadres");

            RuleFor(x => x.Level.ToString())
                .NotEmpty().WithMessage("Dit veld is verplicht.");

            RuleFor(x => x.Street)
                .NotEmpty().WithMessage("Dit veld is verplicht.");

            RuleFor(x => x.HouseNumber)
                .NotEmpty().WithMessage("Dit veld is verplicht.");

            RuleFor(x => x.PostalCode)
                .NotEmpty().WithMessage("Dit veld is verplicht.");
            
            RuleFor(x => x.District)
                .NotEmpty().WithMessage("Dit veld is verplicht.");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<StudentModel>.CreateWithOptions((StudentModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}
